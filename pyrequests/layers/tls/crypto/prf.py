
from __future__ import with_statement
from __future__ import print_function

import hashlib,hmac

def _prf(secret, seed, numblocks):
    output = b''
    def A(seed):
        while 1:
            seed = hmac.new(secret, seed, hashlib.sha256).digest()
            yield seed

    a = A(seed)
    for j in range(numblocks):

        output += hmac.new(secret, msg=next(a) + seed, digestmod=hashlib.sha256).digest()
        #a = hmac.new(secret, msg=a, digestmod=hashlib.sha256).digest()

    return output

def prf(pms, seed,step=6,outlen=48):
    #每一步多加32byte
    out = _prf(pms, seed, step)
    return out[:outlen]


if __name__ == '__main__':


    pre_master_secret =b'\x97$\xe0K\x15_\x8baQ\xdc\xd1\x83a\xf8\x8eq~R5\x04\xbb\xe8y\xe2\xbe,\xf13\x92\xab\xf0\xf6'

    client_random= b"bK\xb0\xc2\xd6D\x96DY]FN\x97\xe3\xde,\x95\x0b*\x13\xbe!'f\xe4\x8fL=\xd5k\xf9j"
    server_random=b'\xe8\xef\x94r\xa9\x91:\xb6#\\\x16\xcf\xad\x1a\xf1\x07\xdej&\xcc\x8b\xf9\xc0z}\x18MF\x9cP\xa7\x98'
    seed = b'master secret' + client_random + server_random
    master_secret=prf(pre_master_secret, seed,outlen=48)
    print('master secret',len(master_secret),master_secret)


    master_secret=b'\x10\xb1\xd1\xd5\xce\x81\xe1\xc8\xb5+\xf0\xa2\x96%\xd4\xa0}\x8cP\xa1I=\xa2C\x1bk\xa7\xf3]3h\xb4\x04q\n5\x0fv\x10\xc9\x87\xf7)|ij\xea\x7f'

    seed = b'key expansion' + server_random + client_random
    key_block =  prf(master_secret, seed,outlen=128)

    print('key_block',len(key_block),key_block)
    print(key_block)


    #client_mac
    #server_mac
    #AES128,SHA256
    #mac_key_length 32
    #enc_key_length 16
    #fixed_iv_length 16
    mac_key_length = 0
    enc_key_length = 16
    fixed_iv_length = 4
    client_enc_key = key_block[0:16]
    server_enc_key = key_block[16:32]
    client_iv_key = key_block[32:36]
    server_iv_key = key_block[36:40]
    #mac_length 32
    #bloack_size 16

    print(client_enc_key,len(client_enc_key))
    print(client_iv_key,len(client_iv_key))

    print(server_enc_key, len(client_enc_key))
    print(server_iv_key, len(client_iv_key))

    #GenericAEADCipher,
    # TLSCompressed.type 0x17,TLSCompressed.version 0x03,0x03

    delheader = False
    m1="01000029030396a6c0251387ec80699955a743e13811c379ac28b39b65a6d64fbd87c08c22b5000002009c0100"
    m2="0200004603038cfa6448f364048c610aadc091b6e70236e53eb1b43b06cc74ceeeced41e88e2208c98e45be52aca42400087ac9a67b4568df45de51302bfc73e79892fdca783af009c00"
    m3="0b000abe000abb00060730820603308204eba00302010202100ff862d0dbe95e57549caaca990f8ba0300d06092a864886f70d01010b0500306e310b300906035504061302555331153013060355040a130c446967694365727420496e6331193017060355040b13107777772e64696769636572742e636f6d312d302b06035504031324456e6372797074696f6e204576657279776865726520445620544c53204341202d204731301e170d3231303831303030303030305a170d3232303831303233353935395a301b31193017060355040313107777772e73756d616f7061692e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100c930a0bc9539784a1e407483acfef4693e59a623b4b0c607b36bb23788789e6a1d67846ff1230c2b41fe383c2082ac00456bb748866554ba315cf355076d0395fb9ee6f99949ae757a3b893a6fa8f346eee383de40ad2c24f7473d0041fbca9cd6c83d4feaa69088717010de47ff27d8042d66d9cd7999cd2ccbf81c36d43c1675eac4e7e5e9a0f18cbef8fa3a962677978a2db0cb9fc28722f2f70c8c057f8f5e36b27103420b15440c1471f3cb1c66b5fd8b300c225ee89a710133970641a5c2c4afc754f4953a79e77599621948afef9e218c8853fc01bb100c3440859c9d9b4673e3da001e8ca297b6926535c6939d189a0738322671d0427a11cf680aa50203010001a38202ee308202ea301f0603551d2304183016801455744fb2724ff560ba50d1d7e6515c9a01871ad7301d0603551d0e041604149c7eb5229285a6ffe381fe5255093c3daf63d43d30290603551d110422302082107777772e73756d616f7061692e636f6d820c73756d616f7061692e636f6d300e0603551d0f0101ff0404030205a0301d0603551d250416301406082b0601050507030106082b06010505070302303e0603551d20043730353033060667810c0102013029302706082b06010505070201161b687474703a2f2f7777772e64696769636572742e636f6d2f43505330818006082b0601050507010104743072302406082b060105050730018618687474703a2f2f6f6373702e64696769636572742e636f6d304a06082b06010505073002863e687474703a2f2f636163657274732e64696769636572742e636f6d2f456e6372797074696f6e457665727977686572654456544c5343412d47312e63727430090603551d13040230003082017e060a2b06010401d6790204020482016e0482016a01680075002979bef09e393921f056739f63a577e5be577d9c600af8f94d5d265c255dc7840000017b2ee021420000040300463044022046b5a10d29a6f344b37db609c4020aaeeeaaede61b6ad993c54fa33b527aeb2a0220130877164b804875911dfc51f52ca0430301b7228291dfb8d21de1b9014905ee00770051a3b0f5fd01799c566db837788f0ca47acc1b27cbf79e88429a0dfed48b05e50000017b2ee021310000040300483046022100f04caa05a11570b32f574d96f649a89fb127568d5748de7c1dd3a5c22ea891c30221008a8049cc3160aa2cbf31c59246b9d6295d72b296e048f85383c38639649a0cea00760041c8cab1df22464a10c6a13a0942875e4e318b1b03ebeb4bc768f090629606f60000017b2ee020d4000004030047304502203571c7128aca3433eac2510a58964cd24b0bfdac3d1ebce830b01331a9bc8a79022100d7457e61c66db3bc97e41b4d410702ce7bf75e8a186f762ac11fc0416a58d040300d06092a864886f70d01010b050003820101005f3a26c7fba6c4e348674f749c8d7b216f667c8814b1d2b1267c0d434c127f5646beb3f8b83316a736bbc81de1e05993ad464df3adbc69eb94127dab8161a1f97e9fa306a364cd35f6123b7e4e6253f3a1e3171c17eaedc17204c912e9ba27ae0076a4bd7689bf417fc0d8abc9758f3bc84487e9da7081ba298685198da71f0b37bd45222d346bdce098bd60433c5fe3fe6de494868de21f71c03453bd1fed1dcdced0cd9ada0e8917e14ceb89896da52a68296b9fc4569815a134b7e25ab93a15caabe2d6095856ff3381f18e94daac9886b0f1f65d439bc85562c95c0a7eb542d35f5fb792be178dfbbb271b12a9e03aba795d937d324eb9e038888fe9dc450004ae308204aa30820392a00302010202100279ac458bc1b245abf98053cd2c9bb1300d06092a864886f70d01010b05003061310b300906035504061302555331153013060355040a130c446967694365727420496e6331193017060355040b13107777772e64696769636572742e636f6d3120301e06035504031317446967694365727420476c6f62616c20526f6f74204341301e170d3137313132373132343631305a170d3237313132373132343631305a306e310b300906035504061302555331153013060355040a130c446967694365727420496e6331193017060355040b13107777772e64696769636572742e636f6d312d302b06035504031324456e6372797074696f6e204576657279776865726520445620544c53204341202d20473130820122300d06092a864886f70d01010105000382010f003082010a0282010100b3de3fac2469be35772421ea629ca07aadde3448c56e4c0ef7fd43288e47b55f1702bae7a7acd1416221bef837da519edcc5d54818cc31aede9a5954c76895bc619ba7564bd38afe515e84a353d0e608f5aaa4e85f94edc03a8f1482fa20c13d7c1d178aecdca472a776909faa63a69d72afb201e98e33bfbd847bf3e567feab2ba2270ba5a92b49cf54e611ee7f620ee3ded44e08c543011ff4f7dfede1cae1f776f7e089650e5248dda4c6f2c57f973657b9b84222c81b22e08bdb7130a1f2bba27c2222e660d7919ae7313f27c1f60257abfa90375791b80644b2ac478a6e71b26d6caa889141b1b99236b7ba5f7b02917399d679cbc30597f7fa9d4ca40f0203010001a382014f3082014b301d0603551d0e0416041455744fb2724ff560ba50d1d7e6515c9a01871ad7301f0603551d2304183016801403de503556d14cbb66f0a3e21b1bc397b23dd155300e0603551d0f0101ff040403020186301d0603551d250416301406082b0601050507030106082b0601050507030230120603551d130101ff040830060101ff020100303406082b0601050507010104283026302406082b060105050730018618687474703a2f2f6f6373702e64696769636572742e636f6d30420603551d1f043b30393037a035a0338631687474703a2f2f63726c332e64696769636572742e636f6d2f4469676943657274476c6f62616c526f6f7443412e63726c304c0603551d2004453043303706096086480186fd6c0102302a302806082b06010505070201161c68747470733a2f2f7777772e64696769636572742e636f6d2f4350533008060667810c010201300d06092a864886f70d01010b050003820101002b71a9ebf686abb68166cc5ffe843e4c3fc14b05b7014e044caf8641fda417361991bcb9485ac774fa26ba7c761c1cd58947211a8a1f1a083b8075b45b73254005d6334af92d4bd2b5cafcd900d660d3da532e2d682426c9a27e541fbac311ecb528a03a548d1766babe0e2b81ec62c5e895e18481d3762aa76b774de64733d1127e4bacef89d0c96ee94467b38fe4c2e38c426a009040ecf3366cc400fd929c2ac9b0d1360e94553272fc27ac4145d8e63ac0b737a710b8ab915dbcc1c950630aa000f2dd4bd08fbdc1725eacb3f212b8f2acc29668114b99f2bf007345e198a1c0f18e73bc3a5077330595c7e5117324d9f0c3e5a72ae4cf2341df9d51fc96"
    m4="0e000000"
    m5="1000010201004ffe49db62e073f12c02a7ebc90e045d8d5eac5a70ffa6186710c5003e47252b2a0205beda2f358afaafcfc07304271076a95578ec19f8ee3b9860b6e609889350846736953fd4f5ad17c0f17e372d5cd6dd04dc8c945f799dcd51ec8784399cf8198e3deac9e5221dcc6c5154431630a6a03612634e9710b45a46715a8398fe1cb05c7295b39ca0d9fe55119ca501d60d78c654a8d0eda33bbc4be88507038345449b2b5f2690d2874ddeb4439b0ca49741e85ebc2d0ea0554e5260164cd8fc9240d7884f4c9f7dc303364110eadd08fba41ef80985c06933ed35f1cdf0e237eb9ab299bd68bdb2aa1e306eabba09e2e1f6f9da507d96f7822f319b856108aa"
    m6='111111111111111'
    if delheader:
        m1,m2,m3,m4,m5,m6 = m1[10:],m2[10:],m3[10:],m4[10:],m5[10:],m6[10:]


    master_secret = b'ryJ\xfe\x8dh\x84b\xc2\xf1[\x14u\xfa\x88d*\xc8#h\x812v\x83\xe9h\r\x93F\x08\xb3\x99\x7f\xdcC\xbcg\xa1Y\xe4\xae\x04\xac\xa2`\xb5\xc9\xe2'


    label= b"client finished"
    #label =b"server finished"
    m = bytes.fromhex(m1+m2+m3+m4+m5)
    handshake = hashlib.sha256(m).digest()
    p = prf(master_secret, label+handshake,outlen=12)



